  # 3-1
    # linear search algorithm via while 

    from typing import Any, Sequence

    def seq_search(a: Sequence, key: Any) -> int:
      i = 0

      while True:
        if i == len(a):
          return -1
        if a[i] == key:
          return i 
        i += 1

    if __name__ == '__main__':
      num = int(input("Input length of elements: "))
      x = [None] * num

      for i in range(num):
        x[i] = int(input(f'x[{i}]: '))

      ky = int(input('Input value to search: '))

      idx = seq_search(x, ky)

      if idx == -1:
        print('No element')
      else:
        print(f'That value is at x[{idx}].')

선형검색
선형검색은 배열 맨 앞부터 순소대로 원소를 스캔하며,
원소의 값이 정렬되지 않은 배열에서 검색할 때 사용하는 유일한 방법이다.

> 보초법 sentinel method : 검색하고자 하는 키값을 배열의 맨 끝에 저장해서
검색의 종료 조건을 1개로 줄이는 방법

  # 3-3
    # improving linear search using sentinel method

    from typing import Any, Sequence
    import copy

    def seq_search(seq: Sequence, key: Any) -> int:
      a = copy.deepcopy(seq)
      a.append(key)

      i = 0
      while True:
        if a[i] == key:
          break
        i += 1

      return -1 if i == len(seq) else i

    if __name__ == '__main__':
      num = int(input("Input length: "))
      x = [None] * num

      for i in range(num):
        x[i] = int(input(f"x[{i}]: "))

      ky = int(input("Input value to search: "))

      idx = seq_search(x, ky)

      if idx == -1:
        print("No element")
      else:
        print(f"That value is at x[{idx}]")
        
        
        
