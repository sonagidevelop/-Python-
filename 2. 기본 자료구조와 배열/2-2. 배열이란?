>스캔 : 배열 원소를 하나씩 차례로 주목하여 살펴보는 방식

  # 배열 원소의 최댓값 구하기

        a = [22, 57, 11, 91, 32]


        def max_of(a):
            maximum = a[0]
            for i in range(1, len(a)):
                if a[i] > maximum:
                    maximum = a[i]
            return maximum


        b = max_of(a)
        print(b)
        
여기서 주의해야 할 것이 maximum을 0번째 인덱스로 지정을 해 놨기 때문에
1번째부터 스캔한다는 점이다.
근데 생각해보니까 0부터해도 큰 문제는 없겠다.

# 2-2
  # 시퀀스 원소의 최댓값 출력하기

    from typing import Any, Sequence


    def max_of(a: Sequence) -> Any:
        """시퀀스형 a 원소의 최댓값을 반환"""
        maximum = a[0]
        for i in range(1, len(a)):
            if a[i] > maximum:
                maximum = a[i]
        return maximum


    if __name__ == '__main__':
        print('배열의 최댓값을 구합니다.')
        num = int(input('원소 수를 입력하세요.: '))
        x = [None] * num  # 원소 수가 num인 리스트를 생성

        for i in range(num):
            x[i] = int(input(f'x[{i}]값을 입력하세요.: '))

        print(f'최댓값은 {max_of(x)}입니다.')

>시퀀스 자료형 : 자료형의 하나이며, 문자열, 리스트, 튜플을 포함하고 있는 자료형이다.
>(a: Sequence) -> Any : a로 시퀀스 자료형을 인수로 넣으며, 반환하는 것은 어떤 자료형이던 될 수 있다.
>함수 어노테이션 : 자료형 선언 없이 변수나 함수를 자유롭게 사용하는 파이썬의 특성 때문에 등장한 기능,
  주석달기라고 생각하면 된다. 가장 큰 특징은 강제성이 없다는 것이다.
>모듈 : 하나의 스크립트 프로그램
>__name__ : 모듈 이름을 나타내는 변수이고, 직접 실행 될 때는 '__main__',
  임포트 될 때는 원래의 이름 ('__max__')


# 2-3
  # 배열 원소의 최댓값을 구해서 출력하기 (원솟값을 입력받음)

    from max import max_of

    print('배열의 최댓값을 구합니다.')
    print('주의: "End"를 입력하면 종료합니다.')

    number = 0
    x = []

    while True:
        s = input(f'x[{number}]값을 입력하세요.: ')
        if s == 'End':
            break
        x.append(int(s))
        number += 1

    print(f'{number}개를 입력했습니다.')
    print(f'최댓값은 {max_of(x)}입니다.')

2-2에서 작성한 코드를 max라는 모듈로 이용한다.
여기서 주의할 점은 max에서 if __name__ = "__main__" 이후로 부터는 max가 임포트 되었기 때문에
실행되지 않았다는 점이다.


# 2-4
  # 배열 원소의 최댓값을 구해서 출력하기 (원솟값을 난수로 생성)

    import random
    from max import max_of

    print('난수의 최댓값을 구합니다.')
    num = int(input('난수의 개수를 입력하세요.: '))
    lo = int(input('난수의 최솟값을 입력하세요.: '))
    hi = int(input('난수의 최댓값을 입력하세요.: '))
    x = [None] * num

    for i in range(num):
        x[i] = random.randint(lo, hi)

    print(f'{x}')
    print(f'이 가운데 최댓값은 {max_of(x)}입니다.')

주의 할 점 눈에 띄는 건 x =[None] * num
에서 [None]이 syntax가 눈에 띈다.

# 2-5
  # 각 배열 원소의 최댓값을 구해서 출력하기(튜플,문자열,문자열 리스트)

    from max import max_of

    t = (4, 7, 5.6, 2, 3.14, 1)
    s = 'string'
    a = ["DTS", "AAC", "FLAC"]

    print(max_of(t))
    print(max_of(s))
    print(max_of(a))

정수와 실수 원소가 섞여 있지만 숫자의 크기를 잘 비교해서 출력한다.
스트링에서는 코드값이 가장 큰 글자를 출력한다.
스트링 리스트에서는 사전 순으로 가장 큰 문자열을 출력한다.

# 보충 수업 2-3
  # 따로 생성된 리스트, 튜플의 동일성 판단
    lst1 = [1, 2, 3]
    lst2 = [1, 2, 3]
    print(lst1 is lst2)  #False 동일성 identity 
    print(lst1 == lst2)  #True

  # 리스트, 튜플의 대입
    lst3 = [1, 2, 3, 4, 5]
    lst4 = lst3
    print(lst3 is lst4)
    print()

    lst3[2] = 9
    print(lst3)
    print(lst4)
    

대입은 참조하는 곳을 넣는 것이다.
따라서 대입받은 값이 바뀌면 결과도 바뀐다!

  # 리스트 스캔하기

  # 2C-1
  # 원소 수를 미리 파악

    x = ["John", "George", "Paul", "Ringo"]

    for i in range(len(x)):
        print(f'x[{i}] = {x[i]}')

  # 2C-2
  # 리스트의 모든 원소를 enumerate()함수로 스캔하기

    x = ["John", "George", "Paul", "Ringo"]

    for i, name in enumerate(x) :      #enumerate함수를 쓸 때의 syntax를 주의하자.
        print(f'x[{i}] = {name}')
        
  # 2C-3
  # 리스트의 모든 원소를 enumerate()함수로 스캔하기 (1부터 카운트)

    x = ["John", "George", "Paul", "Ringo"]

    for i, name in enumerate(x,1) :     #enumerate 함수의 두 번째 parameter는 카운터의 시작 수를 정한다.
        print(f'{i}번째 = {name}')


  # 2C-4
  # 리스트의 모든 원소를 enumerate()함수로 스캔하기 (인덱스값을 사용하지 않음)

    x = ["John", "George", "Paul", "Ringo"]

    for i in x :
        print(i)
이게 제일 간편한 것 같다.        
튜플은 리스트를 ()로 감싸고 있다는 점 빼고 모두 같다.

>이터러블 iterable
  :문자열,리스트,튜플,집합,딕셔너리 등의 자료형 객체는 모두 이터러블이다.
  이터러블 객체를 int()의 인수로 전달하면 객체에 대한 반복자 iterator를 반환한다.
  
  # 2-6
  # 뮤터블 시퀀스 원소를 역순으로 정렬

    from typing import Any, MutableSequence

    def reverse_array(a: MutableSequence) -> None:
        """뮤터블 시퀀스 a의 원소를 역순으로 정렬"""
        n = len(a)
        for i in range(n//2):
            a[i], a[n - 1 - i] = a[n - 1 - i], a[i]

    if __name__ == "__main__":
        print("배열 원소를 역순으로 정렬합니다.")
        nx = int(input('원소 수를 입력하세요.: '))
        x = [None] * nx

        for i in range(nx):
            x[i] = int(input(f"x[{i}]값을 입력하세요.: "))

        reverse_array(x)

        print("배열 원소를 역순으로 정렬했습니다.")
        for i in range(nx):
            print(f'x[{i}] = {x[i]}')

192번째 줄에서 두 값을 교환할 때 튜플을 이용해서 간단히 교환하는 모습.
name == main 이거 syntax 주의하기.

  #보충 수업 2-4 리스트를 역순으로 정렬하기
  1) x.reverse()
    파괴적으로 x를 역순으로 수정
  2) reversed(x)
    이터레이터(반복자) 반환
  3) y = list(reversed(x))
    역순으로 된 리스트를 y에 대입

  # 2-7 A
  # 10진수 정숫값을 입력받아 2~36진수로 변환하여 출력하기

      def card_conv(x: int, r: int) -> str:
          """정숫값 x를 r진수로 변환한 뒤 그 수를 나타내는 문자열을 반환"""

          d=''
          dchar = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          n = len(str(x))

          print(f'{r:2} | {x:{n}d}')

          while x > 0:
              print('   +' + (n + 2) * '-')
              if x // r:
                  print(f'{r:2} | {x // r:{n}d} ... {x % r}')
              else:
                  print(f'      {x // r:{n}d} ... {x % r}')
              d += dchar[x % r]
              x //= r

          return d[::-1]

      if __name__ == "__main__":
          print('10진수를 n진수로 변환합니다.')

          while True:
                while True:
                    no = int(input('변환할 값으로 음이 아닌 정수를 입력하세요.: '))
                    if no > 0 :
                        break

                while True:
                    cd = int(input("어떤 진수로 변환할까요?: "))
                    if 2 <= cd <= 36:
                        break

                print(f'{cd}진수로는 {card_conv(no, cd)}입니다.')

                retry = input("한 번 더 변환할까요?(Y 예 / N 아니요): ")
                if retry in {'N', 'n'}:
                    break

>기수 : 수를 나타네는 데 기초가 된다.
      쉽게 생각해서 n진법에서 어떠한 자리에 들어갈 수 있는 수가 기수이다.
      n진수는 n을 기수로 하는 수이다.
> 기수 변환하기 : 알고리즘의 종류가 될 수 있겠다.

# 2C-5
  #1부터 n까지 정수의 합 구하기

    def sum_1ton(n):
      """sum of integer in 1 to n"""
      s=0
      while n > 0:
        s += n
        n -= 1
      return s
	
    x = int(input("input value of x: "))
    print(f'1부터 {x}까지 정수의 합은 {sum_1ton(x)}입니다.')	

> 인수가 이뮤터블일 때 : 함수 안에서 매개변수의 값을 변경하면 다른 객체를 생성하고 그 객체에 대한 참조로 업데이트 됩니다.
따라서 매개변수의 값을 변경해도 호출하는 쪽의 실제 인수에는 영향을 주지 않습니다.

# 2C-6
  # 리스트에서 임의의 원솟값을 업데이트하기

    def change(lst, idx, val):
      """lst[idx]의 값을 val로 업데이트"""
      lst[idx] = val

    x = [11,22,33,44,55]
    print("x= ",x)

    index=int(input("Choose index to update: "))
    value=int(input("Input new value: "))

    change(x, index, value)
    print(f'x = {x}')

> 소수 prime number : 1과 자기 자신을 제외하고 어떤 수와도 나누어 떨어지지 않는 수
> 합성수 composite number : 소수가 아닌 수

  # 2-8
  # Arranging prime number in 1000

    counter = 0
    for n in range(2, 1001):
      for i in range(2, n):
        counter += 1
        if n % i == 0:
          break
      else:
        print(n)

    print(f'counter:{counter}')
    
이 방법에서는 불필요한 연산이 너무 많다.
예를 들어서 13이 소수인지 판별할 때, 2로 나누어 떨어지지 않으면 2의 배수인 4도 나누어 떨어지지 않는데,
이를 제할 경우 연산을 많이 줄일 수 있다.
즉 x가 소수인지 판별 할 때 , n이 x와 나누어 떨어지지 않는다면, x의 배수는 연산에서 제해도 된다.

# 2-9
  # Arranging prime number in 1000 (improving algorithm)

    counter = 0
    ptr = 0
    prime = [None] * 500

    prime[ptr] = 2
    ptr += 1

    for n in range(3, 1001, 2):
      for i in range(1, ptr):
        counter += 1
        if n % prime[i] == 0:
          break
      else:
        prime[ptr] = n
        ptr += 1

    for i in range(ptr):
      print(prime[i])
    print(f'c:{counter}')

같은 결과를 얻을 수 있는 알고리즘은 여러 개일 수 있습니다.
빠른 알고리즘은 많은 메모리를 요구합니다.
연산 횟수가 78,022번에서 14,622번으로 줄어들었다.

	# 2-10
	# Arranging prime number in 1000 (improving algorithm2)

	counter = 0
	ptr = 0
	prime = [None] * 500

	prime[ptr] = 2
	ptr += 1

	prime[ptr]=3
	ptr += 1

	for n in range(5, 1001, 2):
		i = 1
		while prime[i] * prime[i] <= n:
			counter += 2
			if n % prime[i] == 0:
				break
			i += 1
		else:
			prime[ptr] = n
			ptr += 1
			counter += 1


	for i in range(ptr):
		print(prime[i])
	print(f'c:{counter}')
	
이해가 잘 가지 않는다....


	#copying elements in list
	>>> x = [[1,2,3],[4,5,6]]
	>>> y = x.copy()
	>>> x[0][1] = 9
	>>> x
	[[1, 9, 3], [4, 5, 6]]
	>>> y
	[[1, 9, 3], [4, 5, 6]]

copy 함수를 쓸 때 원본의 참조를 가져오는 것이므로 주의해야 한다.
얕은 복사 shallow copy : 리스트 안의 모든 원소가 참조하는 곳까지 복사
깊은 복사 deep copy : 구성 원소 수준으로 복사, y=copy.deepcopy(x) 의 형식으로 사용




	
	
