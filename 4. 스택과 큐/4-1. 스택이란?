
> 스택 stack : 스택은 데이터를 임시 저장할 때 사용하는 자료구조
> LIFO 선입선출 : 나중에 넣은 데이터를 먼저 꺼낸다는 뜻
> push, pop : 데이터 넣기, 빼기

구현해야 하는 코드
- 스택 배열
- 스택 크기 : 스택의 용량
- 스택 포인터 : 스택에 쌓여 있는 개수를 나타내는 정숫값
- 예외 처리 : empty, full , __init__(), __len__()
- 비어 있는 지 판단하는 함수 is_empty()
- 가득 차 있는 지 판단하는 함수 is_full()
- 데이터를 푸시하는 함수
- 데이터를 팝하는 함수
- 데이터를 들여다보는 함수
- 모든 데이터를 삭제하는 함수
- 데이터를 검색하는 함수
- 데이터 개수를 세는 함수
- 데이터가 포함되어 있는지 판단하는 함수
- 모든 데이터를 출력하는 함수

> __ double underscore (dunder)


  # 4-1
    # Implementing Fixed Stack

    from typing import Any

    class FixedStack:
      """fixed length stack class"""

      class Empty(Exception):
        pass

      class Full(Exception):
        pass

      def __init__(self, capacity: int = 256) -> None:
        #initializing stack
        self.stk = [None] * capacity
        self.capacity = capacity
        self.ptr = 0

      def __len__(self) -> int:
        return self.ptr

      def is_empty(self) -> bool:
        """judging whether stack is empty or not"""
        return self.ptr <= 0 

      def is_full(self) -> bool:
        return self.ptr >= self.capacity
        
        
4-1 exception
# 4-1
# Implementing Fixed Stack

from typing import Any

class FixedStack:
	"""fixed length stack class"""
	
	class Empty(Exception):
		pass
		
	class Full(Exception):
		pass
		
	def __init__(self, capacity: int = 256) -> None:
		#initializing stack
		self.stk = [None] * capacity
		self.capacity = capacity
		self.ptr = 0
		
	def __len__(self) -> int:
		return self.ptr
		
	def is_empty(self) -> bool:
		"""judging whether stack is empty or not"""
		return self.ptr <= 0 
		
	def is_full(self) -> bool:
		return self.ptr >= self.capacity
		
	def push(self, value: Any) -> None:
		if self.is_full():
			raise FixedStack.Full
		self.stk[self.ptr] = value
		self.ptr += 1
		
	def pop(self) -> Any:
		if self.is_empty():
			raise FixedStack.Empty
		self.ptr -= 1
		return self.stk[self.ptr]
			
	def peek(self) -> Any:
		if self.is_empty():
			raise FixedStack.Empty
		return self.stk[self.ptr - 1]
	
	def clear(self) -> None:
		self.ptr = 0
		
	def find(self, value: Any) -> Any:
		for i in range(self.ptr - 1, -1, -1):
			if self.stk[i] == value:
				return i
		return -1
		
	def count(self, value: Any) -> bool:
		c = 0
		for i in range(self.ptr):
			if self.stk[i] == value:
				c += 1
		return c
				
	def __contains__(self, value: Any) -> bool:
		return self.count(value)
		
	def dump(self) -> None:
		if self.is_empty():
			print("Stack is Empty!")
		else:
			print(self.stk[:self.ptr])
      

#4-2

from enum import Enum
from fixed_stack import FixedStack

Menu = Enum('Menu',['push','pop','peek','search','dump','exit'])

def select_menu() -> Menu:
	
	s = [f'({m.value}){m.name}' for m in Menu]
	while True:
		print(*s, sep='   ',end='')
		n = int(input(': '))
		if 1 <= n <= len(Menu):
			return Menu(n)
			
s = FixedStack(64)

while True:
	print(f'Data count: {len(s)} / {s.capacity}')
	menu = select_menu()
	
	if menu == Menu.push:
		x = int(input("Input Data: "))
		try:
			s.push(x)
		except FixedStack.Full:
			print('Stack is Full!')
			
	elif menu == Menu.pop:
		try:
			x = s.pop()
			print(f'Popped data is {x}.')
		except FixedStack.Empty:
			print('Stack is Empty')
			
	elif menu == Menu.peek:
		try:
			x = s.peek()
			print(f'Peeked data is {x}.')
		except FixedStack.Empty:
			print('Stack is Empty')
			
	elif menu == Menu.search:
		x = int(input("Input data to search: "))
		if x in s:
			print(f'{s.count(x)}numbers included, the first index is {s.find(x)}.')
		else:
			print("Cannot find that data.")
			
	elif menu == Menu.dump:
		s.dump()
		
	else:
		break
