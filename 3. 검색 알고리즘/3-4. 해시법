> 해시법 hashing : ‘데이터를 저장할 위치 = 인덱스’ 를 간단한 연산으로 구하는 것.
> 해시 함수 hash function : 키를 해시값으로 변환하는 과정
> 버킷 bucket : 해시 테이블에서 만들어진 원소
> 해시 충돌 collision : 저장할 버킷이 중복되는 현상
> 해시 충돌을 대처하는 방법 
  -체인법 chaining(=오픈 해시법 open hashing) 
    : 해시값이 같은 원소를 연결리스트로 관리한다.
  -오픈 주소법 : 빈 버킷을 찾을 때까지 해시를 반복한다.
  
# 3-5
# implementing hash function via chaining

# from future occurs Error!!
# from __future__ import annotations
from typing import Any, Type
import hashlib

class Node:
	"""Node compositing hash"""
	
  #next: Node ====== deleted
	def __init__(self, key: Any, value: Any, next) -> None:
		"""initializing"""
		self.key = key
		self.value = value
		self.next = next
		
class ChainedHash:
	"""implementing hash class via chaining"""
	
	def __init__(self, capacity: int) -> None:
		"""initializing"""
		self.capacity = capacity
		self.table = [None] * self.capacity
		
	def hash_value(self, key: Any) -> int:
		"""calculating hash value"""
		if isinstance(key, int):
			return key % self.capacity
		return (int(hashlib.sha256(str(key).encode()).hexdigest(), 16) % self.capacity)
		
	def search(self, key: Any) -> Any:
		hash = self.hash_value(key)
		p = self.table[hash]
		
		while p is not None:
			if p.key == key:
				return p.value
			p = p.next
			
		return None
	
	def add(self, key: Any, value: Any) -> bool:
		hash = self.hash_value(key)
		p = self.table[hash]
		
		while p is not None:
			if p.key == key:
				return False
			p = p.next
			
		temp = Node(key, value, self.table[hash])
		self.table[hash] = temp
		return True
		
	def remove(self, key: Any) -> bool:
		hash = self.hash_value(key)
		p = self.table[hash]
		pp = None
		
		while p is not None:
			if p.key == key:
				if pp is None:
					self.table[hash] = p.next
				else:
					pp.next = p.next
				return True
			pp = p
			p = p.next
		return False
		
	def dump(self) -> None:
		for i in range(self.capacity):
			p = self.table[i]
			print(i, end='')
			while p is not None:
				print(f'  -> {p.key} ({p.value})', end='')
				p = p.next
			print()
		
# 3-6
# use of ChainedHash

from enum import Enum
from chained_hash import ChainedHash

Menu = Enum('Menu', ['add','delete','search','dump','exit'])

def select_menu() -> Menu:
	s = [f'({m.value}){m.name}' for m in Menu]
	while True:
		print(*s, sep = '   ', end = '')
		n = int(input(': '))
		if 1 <= n <= len(Menu):
			return Menu(n)
			
hash = ChainedHash(13)

while True:
	menu = select_menu()
	
	if menu == Menu.add:
		key = int(input('Input key to add: '))
		val = input('Input value to add: ')
		if not hash.add(key,val):
			print('Failed Adding!')
			
	elif menu == Menu.delete:
		key = int(input('Input key to delete: '))
		if not hash.remove(key):
			print('Failed Deleting!')
	
	elif menu == Menu.search:
		key = int(input('Input key to search: '))
		t = hash.search(key)
		if t is not None:
			print(f'A key that has that value is {t}.')
		else:
			print('No data')
	
	elif menu == Menu.dump:
		hash.dump()
		
	else:
		break



