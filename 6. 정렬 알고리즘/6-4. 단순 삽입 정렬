> 단순 삽입 정렬 straight insertion sort: 주목한 원소보다 더 앞쪽에서 알맞은 위치로 삽입하며 정렬하는 알고리즘
# 6-7
# 단순 삽입 정렬 알고리즘 구현하기

from typing import MutableSequence

def insertion_sort(a: MutableSequence) -> None:
	n = len(a)
	for i in range(1, n):
		j = i
		tmp = a[i]
		while j > 0 and a[j - 1] > tmp:
			a[j] = a[j - 1]
			j -= 1
		a[j] = tmp
		
if __name__ == "__main__" :
	print('단순 삽입 정렬을 수행합니다.')
	num = int(input("원소 수를 입력하세요."))
	x = [None] * num
	
	for i in range(num):
		x[i] = int(input(f'x[{i}]: '))
		
insertion_sort(x)

print('오름차순으로 정렬했습니다.')
for i in range(num):
	print(f'x[{i}] = {x[i]}')

> 시간복잡도 : 앞서 다룬 3가지의 단순 정렬(버블, 선택, 삽입) 알고리즘의 시간 복잡도는 모두 O(n^2)이다



# 6C-1
# 이진 삽입 정렬 알고리즘 구현하기

from typing import MutableSequence

def binary_insertion_sort(a: MutableSequence) -> None:
	n = len(a)
	for i in range(1, n):
		key = a[i]
		pl = 0
		pr = i - 1
		
		while True:
			pc = (pl + pr) // 2
			if a[pc] == key:
				break
			elif a[pc] < key:
				pl = pc + 1
			else:
				pr = pc - 1
			if pl > pr:
				break
			
		pd = pc + 1 if pl <= pr else pr + 1
		
		for j in range(i , pd, -1):
			a[j] = a[j-1]
		a[pd] = key
		
if __name__ == "__main__":
	print("BINARY INSERTION SORT")
	num = int(input("Type number of elements: "))
	x = [None] * num
	
	for i in range(num):
		x[i] = int(input(f'x[{i}]: '))
		
	binary_insertion_sort(x)
	
	print("ASCENDLY ORDERED.")
	
	for i in range(num):
		print(f'x[{i}] = {x[i]}')


# 6C-2
# bisect.insort

from typing import MutableSequence
import bisect

def binary_insertion_sort(a: MutableSequence) -> None:
	for i in range(1, len(a)):
		bisect.insort(a, a.pop(i), 0, i)


> bisect.insort(a, x, lo ,hi)를 호출하면 a가 이미 정렬된 상태를 유지하면서 a[lo] ~ a[hi] 사이에 x를 삽입한다. 만약 a안에 x와 같은 값을 갖는 원소가 여러 개 있으면 가장 오른쪽 위치에 삽입한다.
