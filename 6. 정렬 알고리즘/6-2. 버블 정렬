> 버블 정렬 bubble sort (= 단순 교환 정렬) : 이웃한 두 원소의 대소 관계를 비교하여 필요에 따라 교환을 반복하는 알고리즘

> 패스 pass : 한 번 비교/교환 하는 과정

# 6-1
# 버블 정렬 알고리즘 구현하기

from typing import MutableSequence

def bubble_sort(a: MutableSequence) -> None:
	"""bubble sort"""
	
	n = len(a)
	for i in range(n - 1):
		for j in range(n - 1, i , -1):
			if a[j-1] > a[j]:
				a[j - 1], a[j] = a[j] , a[j - 1]
				
if __name__ == "__main__":
	print("BUBBLE SORT")
	num = int(input("Type number of elements: "))
	x = [None] * num
	
	for i in range(num):
		x[i] = int(input(f'f[{i}]: '))
		
	bubble_sort(x)
	
	print("Sorted in an ascending order")
	for i in range(num):
		print(f'x[{i}] = {x[i]}')


# 6-2, 6-3, 6-4
# 버블 정렬 알고리즘 구현하기(정렬 과정을 출력)(알고리즘 개선 2회)

from typing import MutableSequence

def bubble_sort_verbose(a: MutableSequence) -> None:
	
	k = 0
	ccnt = 0
	scnt = 0
	n = len(a)
	while k < n -1 :
		exchng = 0
		last = n - 1
		
		print(f'pass {i + 1}')
		for j in range(n - 1, k , -1):
			for m in range(0, n-1):
				print(f'{a[m]:2}' + ('  ' if m != j-1 else
									 ' +' if a[j -1] > a[j] 						else ' -'), end = '')
			print(f'{a[n-1]:2}')

			ccnt += 1
			
			if a[j - 1]>a[j]:
				scnt += 1
				a[j - 1], a[j] = a[j], a[j - 1]
				exchng += 1
				last = j
		k = last
		if exchng == 0:
			break
		for m in range(0, n-1):
			print(f'{a[m]:2}', end='  ')
		print(f'{a[n-1]:2}')
	print(f'Compared {ccnt} times.')
	print(f'Exchanged {scnt} times.')

if __name__ == "__main__":
	print("BUBBLE SORT")
	num = int(input("Type number of elements: "))
	x = [None] * num
	
	for i in range(num):
		x[i] = int(input(f'f[{i}]: '))
		
	bubble_sort_verbose(x)
	

# 6-5
# Implementing Shaker Algorithm

from typing import MutableSequence

def shaker_sort(a : MutableSequence) -> None:
	
	left = 0
	right = len(a) - 1
	last = right
	
	while left < right:
		for j in range(right, left, -1):
			if a[j - 1] > a[j]:
				a[j - 1], a[j] = a[j], a[j - 1]
				last = j
		left = last
		
		for j in range(left,right):
			if a[j] > a[j+1]:
				a[j-1],a[j] = a[j],a[j-1]
				last = j
		right = last
