
# 6-11
# Implementing quick sort algorithm

from typing import MutableSequence

a=[5,8,4,2,6,1,3,9,7]
def qsort(a: MutableSequence, left: int, right: int) -> None:
	
	pl = left
	pr = right
	x = a[(left + right) // 2]
	
	print(f'a[{left}] ~ a[{right}]:', *a[left : right + 1])
	
	while pl <= pr:
		while a[pl] < x: pl += 1
		while a[pr] > x: pr -= 1
		if pl <= pr:
			a[pl], a[pr] = a[pr] , a[pl]
			pl += 1
			pr -= 1
			
	if left < pr: qsort(a, left, pr)
	if pl < right: qsort(a, pl, right)
	
def quick_sort(a: MutableSequence) -> None:
	qsort(a, 0, len(a) - 1)
	
quick_sort(a)



# 6-12

from stack import Stack
from typing import MutableSequence

def qsort(a: MutableSequence, left: int, right: int) -> None:
	range = Stack(right - left + 1)
	
	range.push((left,  right))
	
	while not range.is_empty():
		pl , pr = left, right = range.pop()
		x = a[(left + right) // 2 ]
		
		while pl <= pr:
			while a[pl] < x: pl += 1
			while a[pr] > x: pr -= 1
			if pl <= pr:
				a[pl], a[pr] = a[pr], a[pl]
				pl += 1
				pr -= 1
				
		if left < pr: range.push((left, pr))
		if pl < right: range.push((pl, right))
	
> 어렵지만 핵심: 스택을 퀵 정렬에 도입할 때, 나눌 범위의 인덱스를 튜플 형태로 저장하는 데에 스택을 이용한다.

> 스택의 크기 : 스택에 푸시할 때 원소 수가 많은 그룹을 먼저 푸시하는 것이 좋다.
그래야 원소 수가 적은 그룹이 먼저 팝되어 쌓이는 데이터의 최대 개수가 적어지기 때문이다.
배열의 원소 수가 n 일때, 스택에 쌓이는 데이터의 최대 개수는 logn 보다 적다. 

> 피벗 선택 하기: 맨 앞 원소, 중앙 원소, 마지막 원소 중 중앙 값을 구하여 피벗으로 정하면 치우침을 어느 정도 방지 할 수 있을 것 같다.



from typing import MutableSequence

def sort3(a: MutableSequence, idx1: int, idx2: int, inx3: int):
	if a[idx2] < a[idx1]: a[idx2], a[idx1] = a[idx1], a[idx2]
	if a[idx3] < a[idx2]: a[idx3], a[idx2] = a[idx2], a[idx3]
	if a[idx2] < a[idx1]: a[idx2], a[idx1] = a[idx1], a[idx2]
	return idx2
	
def insertion_sort(a, left, right):
	for i in range(left + 1, right + 1):
		j = i
		tmp = a[i]
		while j > 0 and a[j - 1] > tmp:
			a[j] = a[j- 1]
			j -= 1
		a[j] = tmp
		
def qsort(a, left, right):
	if right - left < 9:
		insertion_sort(a, left, right)
	else:
		pl = left
		pr = right
		m = sort3(a, pl, (pl+pr)// 2, pr)
		x = a[m]
		
		a[m], a[pr-1] = a[pr - 1], a[m]
		pl += 1
		pr -= 2
		while pl <= pr:
			while a[pl] < x : pl += 1
			while a[pr] > x : pr -= 1
			if pl <= pr:
				a[pl], a[pr] = a[pr], a[pl]
				pl += 1
				pr -= 1
				
		if left < pr: qsort(a, left, pr)
		if pl < right: qsort(a, pl, right)
		
def quick_sort(a):
	qsort(a, 0 , len(a) - 1)
	
6-13에 들어간 알고리즘
1) 단순 삽입 정렬
2) 중간 값 구하기
3) 재귀 함수 이용 퀵 정렬


# 6C-4
x = [None]* num
x = sorted(x) #ascending order
x = sorted(x, reverse= True)	#descending order
