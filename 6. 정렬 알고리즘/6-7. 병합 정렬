# 6-14
# 정렬을 마친 두 배열을 병합하기

from typing import MutableSequence

def merge_sorted_list(a: Sequence, b: Sequence, c: MutableSequence) -> None:
	pa, pb, pc = 0, 0, 0
	na, nb, nc = len(a),len(b),len(c)
	
	while pa < na and pb < nb:
		if a[pa] <= b[pb]:
			c[pc] = a[pa]
			pa += 1
		else:
			c[pc] = b[pb]
			pb += 1
		
		pc += 1
		
	while pa < na:
		c[pc] = a[pa]
		pa += 1
		pc += 1
		
	while pb < nb:
		c[pc] = b[pb]
		pa += 1
		pc += 1
		

# 정렬을 마친 두 배열의 병합(heapq.merge 사용)

import heapq

a = [1,2,3]
b = [4,9,10]
c = list(heapq.merge(a, b))


# 6-15
# 병합 정렬 알고리즘 구현하기

def merge_sort(a):
	
	def _merge_sort(a, left, right):
		if left < right:
			center = (left + right) // 2
			
			_merge_sort(a, left, center)
			_merge_sort(a, center + 1, right)
			
			p = j = 0
			i = k = left
			
			“””
			i = a의 뒷부분 인덱스
			j = buff의 인덱스
			k = 배열되는 a의 인덱스
			p = buff 길이
			“””
						
			while i <= center:
				buff[p] = a[i]
				p += 1
				i += 1
				
			while i <= right and j < p:
				if buff[j] <= a[i]:
					a[k] = buff[j]
					j += 1
				else:
					a[k] = a[i]
					i += 1
				k += 1
				
			while j < p:
				a[k] = buff[j]
				k += 1
				j += 1
				
	n = len(a)
	buff = [None] * n	
	_merge_sort(a, 0, n-1)
	
	del buff
	
	
	> 병합 정렬 알고리즘 구현하기 어려운데 정렬된 배열 병합하기랑 똑같은 포맷이다. 천천히 생각 해 보면 이해 할 수 있다.
